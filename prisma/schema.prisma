// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile  Profile?
  posts    Post[]
  comments Comment[]

  @@map("users")
}

model Profile {
  id        Int      @id @default(autoincrement())
  fullName  String   @db.VarChar(250)
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  @@map("profiles")
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(250)
  content     String
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int?

  comments   Comment[]
  categories CategoryOnPost[]

  @@map("posts")
}

model CategoryOnPost {
  Post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  createdAt  DateTime @default(now())

  @@id([postId, categoryId])
  @@map("categories_on_posts")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  post CategoryOnPost[]

  @@map("categories")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  User   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int?
  Post   Post? @relation(fields: [postId], references: [id], onDelete: SetNull)
  postId Int?

  @@map("comments")
}
